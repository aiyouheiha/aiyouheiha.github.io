<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Singo &amp; Asher</title>
  
  <subtitle>世间万物皆有定数</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ashman.top/"/>
  <updated>2018-04-19T08:55:19.103Z</updated>
  <id>http://ashman.top/</id>
  
  <author>
    <name>Asher</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rpm</title>
    <link href="http://ashman.top/2018/04/19/linux/rpm/"/>
    <id>http://ashman.top/2018/04/19/linux/rpm/</id>
    <published>2018-04-19T08:48:26.000Z</published>
    <updated>2018-04-19T08:55:19.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p><code>rpm -ivh &lt;xxx.rpm&gt;</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rpm -ivh jdk-8u162-linux-x64.rpm</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:jdk1.8-2000:1.8.0_162-fcs        ################################# [100%]</span><br><span class="line">Unpacking JAR files...</span><br><span class="line">tools.jar...</span><br><span class="line">plugin.jar...</span><br><span class="line">javaws.jar...</span><br><span class="line">deploy.jar...</span><br><span class="line">rt.jar...</span><br><span class="line">jsse.jar...</span><br><span class="line">charsets.jar...</span><br><span class="line">localedata.jar...</span><br><span class="line">$ java -version</span><br><span class="line">java version &quot;1.8.0_162&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_162-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;rpm -ivh &amp;lt;xxx.rpm&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://ashman.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ashman.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Add User into sudoers</title>
    <link href="http://ashman.top/2018/04/19/linux/sudoers/"/>
    <id>http://ashman.top/2018/04/19/linux/sudoers/</id>
    <published>2018-04-19T06:51:44.000Z</published>
    <updated>2018-04-19T08:34:41.987Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过 <code>sudo</code> 以 root 用户身份执行命令</p></blockquote><p>切换到 root 用户，执行 visudo 打开配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ su root</span><br><span class="line"># visudo</span><br></pre></td></tr></table></figure><p>找到配置文件中的 <code>root    ALL=(ALL)       ALL</code> 在其后新增一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>保存后，对应用户便可以使用 sudo 以 root 用户的身份执行命令</p><p>此时，执行命令需要输入当前用户的密码，若要免密，修改配置如下即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username  ALL=(ALL)       NOPASSWD:ALL</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;通过 &lt;code&gt;sudo&lt;/code&gt; 以 root 用户身份执行命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;切换到 root 用户，执行 visudo 打开配置文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://ashman.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ashman.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Redis Cluster - Mac</title>
    <link href="http://ashman.top/2018/01/11/more/redis-cluster-mac/"/>
    <id>http://ashman.top/2018/01/11/more/redis-cluster-mac/</id>
    <published>2018-01-11T08:24:06.000Z</published>
    <updated>2018-01-12T02:50:29.581Z</updated>
    
    <content type="html"><![CDATA[<p>在 Mac 上搭建 Redis Cluster</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install redis</span><br></pre></td></tr></table></figure><p>通过 Homebrew 安装，一般会安装到 <code>/usr/local/Cellar</code> 目录下，配置文件位于 <code>/usr/local/etc</code> 目录下，直接使用可通过如下命令，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start redis</span><br><span class="line">$ redis-cli</span><br><span class="line">$ brew services stop redis</span><br></pre></td></tr></table></figure><p>其中 <code>redis-cli</code> 会默认连接到 <code>6379</code> 端口上启动的服务，连接到指定端口，使用 <code>redis-cli -p 6379</code></p><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/etc</span><br><span class="line">$ mkdir redis-cluster</span><br><span class="line">$ cd redis-cluster</span><br><span class="line">$ mkdir 6380 6381 6382</span><br><span class="line">$ cp ../redis.conf 6380/redis-6380.conf</span><br></pre></td></tr></table></figure><p>修改 <code>redis-6380.conf</code> 中的如下配置项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6380.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><p>之前创建的另外两个目录下，也进行类似的操作，不做赘述。</p><p>之后，通过 <code>redis-server</code> 命令，按照不同配置文件启动。</p><ul><li>PS &gt;&gt;&gt; 通过 Homebrew 安装，以上 <code>redis-server</code> 命令，应该已经添加到环境变量，可以直接使用<ul><li>若无法使用，可首先尝试重启终端</li><li>该命令实际地址为 <code>/usr/local/Cellar/redis/4.0.6/bin/redis-server</code></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/etc/redis-cluster</span><br><span class="line">$ cd 6380</span><br><span class="line">$ redis-server redis-6380.conf</span><br><span class="line">$ cd ../6381</span><br><span class="line">$ redis-server redis-6381.conf</span><br><span class="line">$ cd ../6382</span><br><span class="line">$ redis-server redis-6382.conf</span><br></pre></td></tr></table></figure><p>配置文件中的 <code>cluster-config-file</code> 会自动生成在 <code>/usr/local/var/db/redis</code> 目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nodes-6380.conf</span><br><span class="line">nodes-6381.conf</span><br><span class="line">nodes-6382.conf</span><br></pre></td></tr></table></figure><p>当前集群并非一个可用状态，下面登录其中一个节点，进行下一步配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; CLUSTER MEET 127.0.0.1 6381</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; CLUSTER MEET 127.0.0.1 6382</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; CLUSTER NODES</span><br><span class="line">0592bba6effccae5a2634f1f1ed972adcdcbc4b8 127.0.0.1:6380@16380 myself,master - 0 1515663627000 1 connected</span><br><span class="line">f0bf627ebf9668ebccf8e0dc8536b6151432a5f0 127.0.0.1:6382@16382 master - 0 1515663628816 0 connected</span><br><span class="line">9000e666aee2a910b96ac060553700ee29405397 127.0.0.1:6381@16381 master - 0 1515663629825 2 connected</span><br></pre></td></tr></table></figure><p>此时，通过 <code>CLUSTER INFO</code> 命令查看，集群状态 <code>cluster_state</code> 依旧是 <code>fail</code>。<br>原因是 16384 个 hash slot 还没有被分配给集群中节点，接下来需要分配 slot。</p><p>有两种方式分配 slot：</p><ol><li>（未测试）通过 <code>CLUSTER ADDSLOTS</code> 命令来分配 slot，这种方式是一个个 slot 添加到指定节点，比较麻烦。</li><li>直接在配置文件 <code>nodes-6380.conf/nodes-6381.conf/nodes-6382.conf</code> 中指定<ul><li>在每个文件中包含 <code>myself</code> 的行的末尾添加 slot 信息，例如在 <code>nodes-6380.conf</code> 文件中，改动如下</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0592bba6effccae5a2634f1f1ed972adcdcbc4b8 127.0.0.1:6380@16380 myself,master - 0 1515663627000 1 connected 0-5000</span><br></pre></td></tr></table></figure><p>对应的 <code>6381</code> 可分配 slot <code>5001-10000</code>，<code>6382</code> 可分配 <code>10001-16382</code>，之后重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; CLUSTER NODES</span><br><span class="line">0592bba6effccae5a2634f1f1ed972adcdcbc4b8 127.0.0.1:6380@16380 myself,master - 0 1515663627000 1 connected 0-5000</span><br><span class="line">f0bf627ebf9668ebccf8e0dc8536b6151432a5f0 127.0.0.1:6382@16382 master - 0 1515663628816 0 connected 10001-16383</span><br><span class="line">9000e666aee2a910b96ac060553700ee29405397 127.0.0.1:6381@16381 master - 0 1515663629825 2 connected 5001-10000</span><br><span class="line">127.0.0.1:6380&gt; CLUSTER INFO</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:3</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:2</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:388</span><br><span class="line">cluster_stats_messages_pong_sent:105</span><br><span class="line">cluster_stats_messages_sent:493</span><br><span class="line">cluster_stats_messages_ping_received:105</span><br><span class="line">cluster_stats_messages_pong_received:106</span><br><span class="line">cluster_stats_messages_received:211</span><br></pre></td></tr></table></figure><p>但是，测试使用可能会出现以下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; get test</span><br><span class="line">(error) MOVED 6918 127.0.0.1:6381</span><br></pre></td></tr></table></figure><p>根据错误提示，需要在 <code>6381</code> 端口的 Redis 节点上进行对应的操作，而通过 <code>-c</code> 参数登录，便可以避免这个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 6380 -c</span><br><span class="line">127.0.0.1:6380&gt; set test &quot;Test Message&quot;</span><br><span class="line">-&gt; Redirected to slot [6918] located at 127.0.0.1:6381</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; get test</span><br><span class="line">&quot;Test Message&quot;</span><br></pre></td></tr></table></figure><h2 id="密码认证"><a href="#密码认证" class="headerlink" title="密码认证"></a>密码认证</h2><p><strong>说在前面</strong> &gt;&gt;&gt; 关于密码认证的配置，<strong>并非</strong> 最终结论，应该有更好的方式配置，但因无特别需求，未深入了解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6381&gt; CONFIG SET masterauth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; CONFIG SET requirepass 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; CONFIG REWRITE</span><br><span class="line">(error) NOAUTH Authentication required.</span><br></pre></td></tr></table></figure><p>此时，密码认证已经生效，但是并未写入配置文件，重启将会失效。<br>但是因为已经开启了认证 <code>CONFIG REWRITE</code> 无法执行，所以需要通过 <code>-a</code> 可选项输入密码，重新登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 6381 -c -a 123456</span><br><span class="line">127.0.0.1:6381&gt; CONFIG REWRITE</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>之后可以发现 <code>6381</code> 对应的配置文件已经被重写（<code>6380</code> 与 <code>6382</code> 不会）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/etc/redis-cluster/6381</span><br><span class="line">$ grep -r &apos;masterauth&apos; redis-6381.conf</span><br><span class="line">redis-6381.conf:# masterauth &lt;master-password&gt;</span><br><span class="line">redis-6381.conf:masterauth &quot;123456&quot;</span><br><span class="line">$ grep -r &apos;requirepass&apos; redis-6381.conf </span><br><span class="line">redis-6381.conf:# If the master is password protected (using the &quot;requirepass&quot; configuration</span><br><span class="line">redis-6381.conf:# requirepass foobared</span><br><span class="line">redis-6381.conf:requirepass &quot;123456&quot;</span><br></pre></td></tr></table></figure><p>重启服务，会发现验证也仅在 <code>6381</code> 节点上有效，因此</p><ul><li>如果想要对部分 slot 设置密码，在对应节点上进行配置（或者直接修改配置文件）</li><li>全部设置密码，则需要在每个节点上进行操作（直接修改配置文件会更方便些）</li></ul><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>启动 6380 端口的服务 16380 端口也会被这个进程占用，其他两个节点同理。通过 <code>CLUSTER NODES</code> 命令可以发现，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380@16380</span><br><span class="line">127.0.0.1:6381@16381</span><br><span class="line">127.0.0.1:6382@16382</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://blog.51cto.com/libankling/1832255" target="_blank" rel="noopener">Redis 集群的安装和配置 - Mac</a></li><li><a href="http://blog.csdn.net/a67474506/article/details/50435845" target="_blank" rel="noopener">Redis 学习笔记(五) 基于 Redis 3.0 的集群</a></li><li><a href="http://blog.csdn.net/daiyudong2020/article/details/51674169" target="_blank" rel="noopener">Redis 集群设置密码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Mac 上搭建 Redis Cluster&lt;/p&gt;
    
    </summary>
    
      <category term="更多" scheme="http://ashman.top/categories/%E6%9B%B4%E5%A4%9A/"/>
    
    
      <category term="Mac" scheme="http://ashman.top/tags/Mac/"/>
    
      <category term="Redis" scheme="http://ashman.top/tags/Redis/"/>
    
      <category term="Cluster" scheme="http://ashman.top/tags/Cluster/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 命令</title>
    <link href="http://ashman.top/2018/01/10/more/mysql-command/"/>
    <id>http://ashman.top/2018/01/10/more/mysql-command/</id>
    <published>2018-01-10T02:33:01.000Z</published>
    <updated>2018-01-10T04:28:13.197Z</updated>
    
    <content type="html"><![CDATA[<p>这里会简单介绍 MySQL 操作命令（持续更新……）</p><a id="more"></a><h2 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">create database db_name;</span><br><span class="line">use db_name;</span><br><span class="line">drop database db_name;</span><br></pre></td></tr></table></figure><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><h3 id="列出表"><a href="#列出表" class="headerlink" title="列出表"></a>列出表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h3 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_name` (</span><br><span class="line">  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &apos;Primary Key&apos;,</span><br><span class="line">  `name` varchar(30) NOT NULL COMMENT &apos;Name&apos;,</span><br><span class="line">  `description` varchar(30) DEFAULT NULL COMMENT &apos;Description&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe tb_name;</span><br></pre></td></tr></table></figure><h2 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h2><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &apos;test&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select Host, User from mysql.user;</span><br><span class="line">+-----------+---------------+</span><br><span class="line">| Host      | User          |</span><br><span class="line">+-----------+---------------+</span><br><span class="line">| %         | test          |</span><br><span class="line">| localhost | mysql.session |</span><br><span class="line">| localhost | mysql.sys     |</span><br><span class="line">| localhost | root          |</span><br><span class="line">+-----------+---------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT INSERT, DELETE, UPDATE, SELECT ON db_name.tb_name TO &apos;username&apos;@&apos;host&apos;;</span><br><span class="line">GRANT INSERT, DELETE, UPDATE, SELECT ON db_name.* TO &apos;username&apos;@&apos;host&apos;;</span><br><span class="line">GRANT ALL ON db_name.* TO &apos;username&apos;@&apos;host&apos;;</span><br></pre></td></tr></table></figure><h3 id="取消授权"><a href="#取消授权" class="headerlink" title="取消授权"></a>取消授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REVOKE ALL ON db_name.* FROM &apos;username&apos;@&apos;host&apos;;</span><br><span class="line">REVOKE INSERT, DELETE, UPDATE, SELECT ON db_name.tb_name FROM &apos;username&apos;@&apos;host&apos;;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://blog.csdn.net/liuxiao723846/article/details/49583827" target="_blank" rel="noopener">MySQL 用户表中多个 Host 时的匹配规则</a></li><li><a href="https://www.jianshu.com/p/d7b9c468f20d" target="_blank" rel="noopener">MySQL 创建用户与授权</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里会简单介绍 MySQL 操作命令（持续更新……）&lt;/p&gt;
    
    </summary>
    
      <category term="更多" scheme="http://ashman.top/categories/%E6%9B%B4%E5%A4%9A/"/>
    
    
      <category term="MySQL" scheme="http://ashman.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 安装及使用 - Mac</title>
    <link href="http://ashman.top/2018/01/09/mongodb/install-mongodb-mac/"/>
    <id>http://ashman.top/2018/01/09/mongodb/install-mongodb-mac/</id>
    <published>2018-01-09T07:56:10.000Z</published>
    <updated>2018-01-11T08:26:43.574Z</updated>
    
    <content type="html"><![CDATA[<p>在 Mac 上安装及使用 MongoDB</p><a id="more"></a><h2 id="安装-启动-停止-卸载"><a href="#安装-启动-停止-卸载" class="headerlink" title="安装/启动/停止/卸载"></a>安装/启动/停止/卸载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ brew install mongodb</span><br><span class="line">$ brew services start mongodb</span><br><span class="line">$ brew services stop mongodb</span><br><span class="line">$ brew uninstal mongodb</span><br></pre></td></tr></table></figure><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><ul><li>文件路径 <code>/usr/local/etc/mongod.conf</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: /usr/local/var/log/mongodb/mongo.log</span><br><span class="line">  logAppend: true</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /usr/local/var/mongodb</span><br><span class="line">net:</span><br><span class="line">  bindIp: 127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="To-be-continue-…"><a href="#To-be-continue-…" class="headerlink" title="To be continue …"></a>To be continue …</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Mac 上安装及使用 MongoDB&lt;/p&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="http://ashman.top/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://ashman.top/tags/MongoDB/"/>
    
      <category term="Mac" scheme="http://ashman.top/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Vim 命令</title>
    <link href="http://ashman.top/2018/01/09/more/vim-command/"/>
    <id>http://ashman.top/2018/01/09/more/vim-command/</id>
    <published>2018-01-09T06:03:27.000Z</published>
    <updated>2018-02-01T02:42:28.130Z</updated>
    
    <content type="html"><![CDATA[<p>这里会简单介绍 Vim 操作命令（持续更新……）</p><a id="more"></a><h2 id="整行移动"><a href="#整行移动" class="headerlink" title="整行移动"></a>整行移动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0   移动到行首</span><br><span class="line">$   移动到行末</span><br><span class="line">+   移动到下一行开头</span><br><span class="line">-   移动到上一行开头</span><br></pre></td></tr></table></figure><h2 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">control + w + v                新建一个纵向窗口，打开当前文件</span><br><span class="line">:vs                            等价于 [control + w + v]</span><br><span class="line">:vs path                       新建一个纵向窗口，打开指定 path</span><br><span class="line">control + w &gt;&gt;&gt; w              多窗口间切换，即先使用组合键 [control + w] 之后再次点击 [w]</span><br><span class="line">control + w &gt;&gt;&gt; control + w    等价于 [control + w &gt;&gt;&gt; w]</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/nerxious/archive/2012/12/21/2827303.html" target="_blank" rel="noopener">轻快的VIM（一）：移动</a></li><li><a href="http://vimcdoc.sourceforge.net/doc/usr_08.html#usr_08.txt" target="_blank" rel="noopener">VIM 用户手册 usr_08.txt</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里会简单介绍 Vim 操作命令（持续更新……）&lt;/p&gt;
    
    </summary>
    
      <category term="更多" scheme="http://ashman.top/categories/%E6%9B%B4%E5%A4%9A/"/>
    
    
      <category term="Vim" scheme="http://ashman.top/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>NPM 使用介绍</title>
    <link href="http://ashman.top/2017/12/15/front-end/nodejs/nodejs-npm-intro/"/>
    <id>http://ashman.top/2017/12/15/front-end/nodejs/nodejs-npm-intro/</id>
    <published>2017-12-15T07:56:37.000Z</published>
    <updated>2017-12-21T01:44:49.813Z</updated>
    
    <content type="html"><![CDATA[<p>NPM - Node Package Manager - Node.js 包管理和分发工具</p><a id="more"></a><h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><ul><li><a href="https://github.com/cnpm/cnpm" target="_blank" rel="noopener">cnpm/cnpm</a><ul><li>cnpm: npm client for China mirror of npm <a href="https://npm.taobao.org" target="_blank" rel="noopener">https://npm.taobao.org</a></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install cnpm -g</span><br></pre></td></tr></table></figure><h2 id="install-module"><a href="#install-module" class="headerlink" title="install module"></a>install module</h2><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>文件 <code>package.json</code> 位于模块的目录下，用于定义包的属性。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener">NPM 使用介绍</a></li><li><a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">package.json - Specifics of npm’s package.json handling</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NPM - Node Package Manager - Node.js 包管理和分发工具&lt;/p&gt;
    
    </summary>
    
      <category term="Front End" scheme="http://ashman.top/categories/Front-End/"/>
    
    
      <category term="Front End" scheme="http://ashman.top/tags/Front-End/"/>
    
      <category term="Node.js" scheme="http://ashman.top/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>gulp 使用介绍</title>
    <link href="http://ashman.top/2017/12/14/front-end/gulp/gulp-intro/"/>
    <id>http://ashman.top/2017/12/14/front-end/gulp/gulp-intro/</id>
    <published>2017-12-14T02:20:55.000Z</published>
    <updated>2018-03-07T08:40:56.555Z</updated>
    
    <content type="html"><![CDATA[<p>先把坑挖好……</p><a id="more"></a><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p>全局安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install gulp -g</span><br></pre></td></tr></table></figure><p>定位到 <strong>项目根目录</strong>，作为项目的开发依赖（devDependencies）安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp --save-dev</span><br></pre></td></tr></table></figure><p>在项目根目录下创建一个名为 <code>gulpfile.js</code> 的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch gulpfile.js</span><br></pre></td></tr></table></figure><p>编辑文件，添加 gulp 任务，其中 <code>default</code> 为默认任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;, function() &#123;</span><br><span class="line">    console.log(&apos;default run&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;hello&apos;, function() &#123;</span><br><span class="line">    console.log(&apos;Hello World&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>直接运行 gulp 会执行默认任务（等价于执行 <code>gulp default</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gulp</span><br><span class="line">[17:21:09] Using gulpfile ~/test/gulp/gulpfile.js</span><br><span class="line">[17:21:09] Starting &apos;default&apos;...</span><br><span class="line">default run</span><br><span class="line">[17:21:09] Finished &apos;default&apos; after 130 μs</span><br></pre></td></tr></table></figure><p>执行指定任务（如 <code>hello</code>），则可使用如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gulp hello</span><br><span class="line">[17:20:42] Using gulpfile ~/test/gulp/gulpfile.js</span><br><span class="line">[17:20:42] Starting &apos;hello&apos;...</span><br><span class="line">Hello World</span><br><span class="line">[17:20:42] Finished &apos;hello&apos; after 126 μs</span><br></pre></td></tr></table></figure><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><ul><li><a href="http://babeljs.io/" target="_blank" rel="noopener">Babel</a></li></ul><blockquote><p>Babel is a JavaScript compiler. Use next generation JavaScript, today.</p></blockquote><p>Install the Babel CLI and a preset</p><ul><li>安装 <code>babel-cli</code> 和 <code>babel-preset-env</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-cli babel-preset-env</span><br></pre></td></tr></table></figure><p>Create a .babelrc file (or use your package.json)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Current package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-env"</span>: <span class="string">"^1.6.1"</span>,</span><br><span class="line">    <span class="attr">"gulp"</span>: <span class="string">"^3.9.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Current gulpfile</p><ul><li>必须命名为 <code>gulpfile.babel.js</code> 否则无法正确识别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import gulp from &apos;gulp&apos;;</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;, () =&gt; &#123;</span><br><span class="line">    console.log(&quot;Default&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gulp</span><br><span class="line">[17:14:34] Failed to load external module @babel/register</span><br><span class="line">[17:14:34] Requiring external module babel-register</span><br><span class="line">[17:14:35] Using gulpfile ~/test/gulp/gulpfile.babel.js</span><br><span class="line">[17:14:35] Starting &apos;default&apos;...</span><br><span class="line">Default</span><br><span class="line">[17:14:35] Finished &apos;default&apos; after 120 μs</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const gulp = require(&apos;gulp&apos;);</span><br><span class="line">// scss to css</span><br><span class="line">const gulpSass = require(&apos;gulp-sass&apos;);</span><br><span class="line">// concat files</span><br><span class="line">const gulpConcat = require(&apos;gulp-concat&apos;);</span><br><span class="line">// minify css</span><br><span class="line">const gulpMinifyCss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;style&apos;, function () &#123;</span><br><span class="line">   return gulp.src(&apos;./app/style/**/*.scss&apos;)</span><br><span class="line">       .pipe(gulpSass())</span><br><span class="line">       .pipe(gulpConcat(&apos;core.min.css&apos;))</span><br><span class="line">       .pipe(gulpMinifyCss())</span><br><span class="line">       .pipe(gulp.dest(&apos;./dest/style&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;, function () &#123;</span><br><span class="line">   console.log(&apos;Default Task Run ...&apos;);</span><br><span class="line">   gulp.run(&apos;style&apos;);</span><br><span class="line">   // Watch directory setting, after changed, then run task &apos;style&apos;</span><br><span class="line">   gulp.watch(&apos;./app/style/**/*.scss&apos;, [&apos;style&apos;]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>gulp-load-plugins</code> and <code>gulp.run() has been deprecated.</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const gulp = require(&apos;gulp&apos;);</span><br><span class="line">const gulpLoadPlugins = require(&apos;gulp-load-plugins&apos;);</span><br><span class="line"></span><br><span class="line">const plugins = gulpLoadPlugins();</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;style&apos;, function () &#123;</span><br><span class="line">   return gulp.src(&apos;./app/style/**/*.scss&apos;)</span><br><span class="line">       .pipe(plugins.sass())</span><br><span class="line">       .pipe(plugins.concat(&apos;core.min.css&apos;))</span><br><span class="line">       .pipe(plugins.minifyCss())</span><br><span class="line">       .pipe(gulp.dest(&apos;./dest/style&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;, [&apos;style&apos;], function () &#123;</span><br><span class="line">   gulp.watch(&apos;./app/style/**/*.scss&apos;, [&apos;style&apos;]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>browser-sync</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">const gulp = require(&apos;gulp&apos;);</span><br><span class="line">const gulpLoadPlugins = require(&apos;gulp-load-plugins&apos;);</span><br><span class="line">const browserSync = require(&apos;browser-sync&apos;).create();</span><br><span class="line"></span><br><span class="line">const plugins = gulpLoadPlugins();</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;style&apos;, function () &#123;</span><br><span class="line">   return gulp.src(&apos;./app/style/**/*.scss&apos;)</span><br><span class="line">       .pipe(plugins.sass())</span><br><span class="line">       .pipe(plugins.concat(&apos;core.min.css&apos;))</span><br><span class="line">       .pipe(plugins.minifyCss())</span><br><span class="line">       .pipe(gulp.dest(&apos;./dest/style&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;html&apos;, function () &#123;</span><br><span class="line">    return gulp.src(&apos;./app/html/**/*.html&apos;)</span><br><span class="line">        .pipe(gulp.dest(&apos;./dest/html&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 静态服务器</span><br><span class="line">gulp.task(&apos;browser-sync&apos;, function() &#123;</span><br><span class="line">    // browser-sync watch 改变后自动刷新页面</span><br><span class="line">    const files = [&apos;./dest/style/**/*.scss&apos;, &apos;./dest/html/**/*.html&apos;];</span><br><span class="line">    browserSync.init(files, &#123;</span><br><span class="line">        server: &#123;</span><br><span class="line">            // 默认打开该目录下的 index.html 访问具体文件 http://localhost:3000/index.html</span><br><span class="line">            baseDir: &quot;./dest/html&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;, [&apos;style&apos;, &apos;html&apos;, &apos;browser-sync&apos;], function () &#123;</span><br><span class="line">    // gulp watch 改变后执行对应任务，构建项目</span><br><span class="line">    gulp.watch(&apos;./app/style/**/*.scss&apos;, [&apos;style&apos;]);</span><br><span class="line">    gulp.watch(&apos;./app/html/**/*.html&apos;, [&apos;html&apos;]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先把坑挖好……&lt;/p&gt;
    
    </summary>
    
      <category term="Front End" scheme="http://ashman.top/categories/Front-End/"/>
    
    
      <category term="Front End" scheme="http://ashman.top/tags/Front-End/"/>
    
      <category term="gulp" scheme="http://ashman.top/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Git 命令</title>
    <link href="http://ashman.top/2017/12/11/more/git-command/"/>
    <id>http://ashman.top/2017/12/11/more/git-command/</id>
    <published>2017-12-11T02:31:12.000Z</published>
    <updated>2018-04-19T09:54:07.225Z</updated>
    
    <content type="html"><![CDATA[<p>这里会简单介绍 Git 操作命令（持续更新……）</p><a id="more"></a><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -h</span><br></pre></td></tr></table></figure><h3 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.0.1 -m &quot;version 0.0.1&quot;</span><br><span class="line">$ git tag v0.0.2-light</span><br></pre></td></tr></table></figure><h3 id="标签列表"><a href="#标签列表" class="headerlink" title="标签列表"></a>标签列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.0.1</span><br><span class="line">v0.0.2-light</span><br><span class="line"></span><br><span class="line">$ git tag -l</span><br><span class="line">v0.0.1</span><br><span class="line">v0.0.2-light</span><br><span class="line"></span><br><span class="line">$ git tag -n1</span><br><span class="line">v0.0.1          version 0.0.1</span><br><span class="line">v0.0.2-light    update xxx</span><br></pre></td></tr></table></figure><h3 id="查看标签详情"><a href="#查看标签详情" class="headerlink" title="查看标签详情"></a>查看标签详情</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0.0.2-light</span><br></pre></td></tr></table></figure><h3 id="切换到指定标签"><a href="#切换到指定标签" class="headerlink" title="切换到指定标签"></a>切换到指定标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout v0.0.1</span><br></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.0.1</span><br><span class="line">Deleted tag &apos;v0.0.1&apos; (was bce8bc1)</span><br></pre></td></tr></table></figure><h3 id="为指定-commit-添加标签"><a href="#为指定-commit-添加标签" class="headerlink" title="为指定 commit 添加标签"></a>为指定 commit 添加标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.0.1-x 77aba8</span><br><span class="line">$ git tag -n1</span><br><span class="line">v0.0.1-x        version 0.0.1-x</span><br><span class="line">v0.0.2-light    update xxx</span><br></pre></td></tr></table></figure><h3 id="提交标签到远程"><a href="#提交标签到远程" class="headerlink" title="提交标签到远程"></a>提交标签到远程</h3><p>通常 <code>git push</code> 不会将标签提交，需显式操作：</p><p>提交 v0.0.1 标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v0.0.1</span><br></pre></td></tr></table></figure><p>提交本地所有标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br></pre></td></tr></table></figure><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -h</span><br></pre></td></tr></table></figure><h3 id="amend-previous-commit"><a href="#amend-previous-commit" class="headerlink" title="amend previous commit"></a>amend previous commit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend -h</span><br></pre></td></tr></table></figure><h4 id="修改上一次提交的-Author-信息"><a href="#修改上一次提交的-Author-信息" class="headerlink" title="修改上一次提交的 Author 信息"></a>修改上一次提交的 Author 信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --author=&apos;Name &lt;email&gt;&apos;</span><br></pre></td></tr></table></figure><p>符合以上命令格式即可，例如，直接输入上面的命令时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line"></span><br><span class="line">commit f2928cb0b6bc9d29e533110ad381bd28d9413d8d (HEAD -&gt; master)</span><br><span class="line">Author: Name &lt;email&gt;</span><br><span class="line">Date:   Thu Jan 18 09:54:50 2018 +0800</span><br></pre></td></tr></table></figure><h2 id="fatal"><a href="#fatal" class="headerlink" title="fatal"></a>fatal</h2><h3 id="fatal-refusing-to-merge-unrelated-histories"><a href="#fatal-refusing-to-merge-unrelated-histories" class="headerlink" title="fatal: refusing to merge unrelated histories"></a>fatal: refusing to merge unrelated histories</h3><ul><li>创建本地仓库</li><li>创建远程仓库，并自动生成了一些文件</li><li>需要关联本地和远程仓库，此时无法直接 push</li><li>首先执行 pull 但是会出现以上报错，添加 <code>--allow-unrelated-histories</code> 解决</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里会简单介绍 Git 操作命令（持续更新……）&lt;/p&gt;
    
    </summary>
    
      <category term="更多" scheme="http://ashman.top/categories/%E6%9B%B4%E5%A4%9A/"/>
    
    
      <category term="Git" scheme="http://ashman.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot with Swagger</title>
    <link href="http://ashman.top/2017/11/21/spring/spring-boot/spring-boot-with-swagger/"/>
    <id>http://ashman.top/2017/11/21/spring/spring-boot/spring-boot-with-swagger/</id>
    <published>2017-11-21T10:40:43.000Z</published>
    <updated>2017-11-21T15:32:33.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>THE WORLD’S MOST POPULAR API TOOLING</p></blockquote><a id="more"></a><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- swagger --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"top.ashman.sample.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"API Title - Powered by Swagger"</span>)</span><br><span class="line">                .description(<span class="string">"Description of API"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"sample.ashman.top"</span>)</span><br><span class="line">                .version(<span class="string">"v1"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(value = <span class="string">"Demo API"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/v1/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"Create Demo"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">create</span><span class="params">(@RequestBody DemoCommand demoCommand)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line">        Demo demo = demoService.create(demoCommand);</span><br><span class="line">        URI uri = <span class="keyword">new</span> URI(<span class="string">"/v1/demo/"</span> + demo.getId());</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.created(uri).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个遇到的问题"><a href="#一个遇到的问题" class="headerlink" title="一个遇到的问题"></a>一个遇到的问题</h2><p>代码实现时，针对 <code>@RequestMapping</code> 做了切面方法，用来记录请求数据和返回值。<br>在切面方法中，使用了 <code>Method java.lang.Class#getMethod(String name, Class&lt;?&gt;... parameterTypes)</code> 方法。</p><p>关于这个方法，其注释中注明了这是一个用于获取 public 方法的方法：</p><ul><li>Returns a {@code Method} object that reflects the specified <strong>public</strong> member method of the class or interface represented by this {@code Class} object. </li></ul><p>而 Swagger <code>springfox.documentation.swagger.web.ApiResourceController</code> 中，<br><code>@RequestMapping</code> 注解下的 uiConfiguration 方法并非一个 public 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/configuration/ui&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">ResponseEntity&lt;UiConfiguration&gt; uiConfiguration() &#123;</span><br><span class="line">return new ResponseEntity&lt;UiConfiguration&gt;(</span><br><span class="line">    Optional.fromNullable(uiConfiguration).or(UiConfiguration.DEFAULT), HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这导致了切面调用的 <code>getMethod</code> 方法无法正常执行，抛出 <code>NoSuchMethodException</code> 异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// getMethod 方法代码片段</span><br><span class="line">if (method == null) &#123;</span><br><span class="line">    throw new NoSuchMethodException(getName() + &quot;.&quot; + name + argumentTypesToString(parameterTypes));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就导致无法正常使用 Swagger 的 UI 功能。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://swagger.io/" target="_blank" rel="noopener">World’s Most Popular API Framework | Swagger</a></li><li><a href="http://blog.csdn.net/forezp/article/details/71023536" target="_blank" rel="noopener">Spring Boot 集成 Swagger2 - 构建优雅的 Restful API</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;THE WORLD’S MOST POPULAR API TOOLING&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://ashman.top/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://ashman.top/tags/Spring-Boot/"/>
    
      <category term="Swagger" scheme="http://ashman.top/tags/Swagger/"/>
    
      <category term="RESTful API" scheme="http://ashman.top/tags/RESTful-API/"/>
    
  </entry>
  
  <entry>
    <title>Equals or Not</title>
    <link href="http://ashman.top/2017/11/14/java/equals-or-not/"/>
    <id>http://ashman.top/2017/11/14/java/equals-or-not/</id>
    <published>2017-11-14T07:24:20.000Z</published>
    <updated>2017-11-21T15:32:33.835Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一些帮助判断 equals 的方法</p><a id="more"></a><h2 id="org-apache-commons-lang-builder-EqualsBuilder"><a href="#org-apache-commons-lang-builder-EqualsBuilder" class="headerlink" title="org.apache.commons.lang.builder.EqualsBuilder"></a>org.apache.commons.lang.builder.EqualsBuilder</h2><p>FROM - <a href="https://github.com/citerus/dddsample-core" target="_blank" rel="noopener">dddsample-core</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean sameEventAs(final HandlingEvent other) &#123;</span><br><span class="line">    return other != null &amp;&amp; new EqualsBuilder().</span><br><span class="line">            append(this.cargo, other.cargo).</span><br><span class="line">            append(this.voyage, other.voyage).</span><br><span class="line">            append(this.completionTime, other.completionTime).</span><br><span class="line">            append(this.location, other.location).</span><br><span class="line">            append(this.type, other.type).</span><br><span class="line">            isEquals();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java-util-Objects"><a href="#java-util-Objects" class="headerlink" title="java.util.Objects"></a>java.util.Objects</h2><p>FROM - 阿里巴巴 JAVA 开发手册</p><blockquote><p>推荐使用 JDK7 引入的工具类 <code>java.util.Objects#equals</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static boolean equals(Object a, Object b) &#123;</span><br><span class="line">    return (a == b) || (a != null &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍一些帮助判断 equals 的方法&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://ashman.top/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ashman.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA Auditing</title>
    <link href="http://ashman.top/2017/11/13/spring/spring-data/jpa/spring-data-jpa-auditing/"/>
    <id>http://ashman.top/2017/11/13/spring/spring-data/jpa/spring-data-jpa-auditing/</id>
    <published>2017-11-13T06:48:46.000Z</published>
    <updated>2017-11-21T15:32:33.836Z</updated>
    
    <content type="html"><![CDATA[<p>通过样例，简单介绍 Spring Data JPA Auditing 功能（基于 Spring Boot）</p><ul><li>创建/更新数据的同时，生成数据创建/修改时间</li><li>创建/更新数据的同时，生成数据创建/修改人</li></ul><a id="more"></a><h2 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h2><p>假设 <code>CurrentUserInfo</code> 类为一个用来获取访问用户信息的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentUserInfo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">        String userName = request.getHeader(<span class="string">"User-Name"</span>);</span><br><span class="line">        <span class="keyword">return</span> userName == <span class="keyword">null</span> ? <span class="string">""</span> : userName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应开启 <strong>审计</strong> 功能的配置类，可参考如下代码</p><ul><li><code>@EnableJpaAuditing</code> 用于开启审计功能</li><li><code>auditorAware()</code> 方法用于提供 <code>CurrentAuditor</code>，实现了 <code>AuditorAware</code> 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.AuditorAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaAuditing;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJpaAuditing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuditorAware&lt;String&gt; <span class="title">auditorAware</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CurrentUserInfo::getUserName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>如下 <code>GeneralEntity</code> 是一个提供给实体类继承的，包含公共属性的抽象类</p><ul><li><strong>PS</strong> 公共类 <code>GeneralEntity</code> 只是测试使用，感觉会方便些许，暂不确定后果，慎重使用</li></ul><p>其中</p><ul><li><code>@EntityListeners({AuditingEntityListener.class})</code> <ul><li>用于设定所回调的 <code>EntityListener</code>，通过它来捕获审计信息</li><li>可以认为是在对应 Entity 或 Mapped Superclass 上启用审计功能</li></ul></li><li><code>@CreatedDate</code> 创建时间</li><li><code>@CreatedBy</code> 创建人</li><li><code>@LastModifiedDate</code> 修改时间</li><li><code>@LastModifiedBy</code> 修改人</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.CreatedBy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.CreatedDate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.LastModifiedBy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.LastModifiedDate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.domain.support.AuditingEntityListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="meta">@EntityListeners</span>(&#123;AuditingEntityListener.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_date"</span>, updatable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> Date createDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_by"</span>, updatable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_modified_date"</span>)</span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="keyword">private</span> Date lastModifiedDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_modified_by"</span>)</span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="keyword">private</span> String lastModifiedBy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是在 Mapped Superclass 中使用，在 Entity 中使用并无差别，不做赘述</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过样例，简单介绍 Spring Data JPA Auditing 功能（基于 Spring Boot）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建/更新数据的同时，生成数据创建/修改时间&lt;/li&gt;
&lt;li&gt;创建/更新数据的同时，生成数据创建/修改人&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Spring Data" scheme="http://ashman.top/categories/Spring-Data/"/>
    
    
      <category term="Java" scheme="http://ashman.top/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://ashman.top/tags/Spring-Boot/"/>
    
      <category term="JPA" scheme="http://ashman.top/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ashman.top/2017/11/12/hello-world/"/>
    <id>http://ashman.top/2017/11/12/hello-world/</id>
    <published>2017-11-12T09:52:52.000Z</published>
    <updated>2017-11-12T09:52:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud Feign 简介</title>
    <link href="http://ashman.top/2017/11/09/spring/spring-cloud/feign/spring-cloud-feign-intro/"/>
    <id>http://ashman.top/2017/11/09/spring/spring-cloud/feign/spring-cloud-feign-intro/</id>
    <published>2017-11-09T10:26:37.000Z</published>
    <updated>2017-11-21T15:32:33.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> It makes writing web service clients easier. </p></blockquote><p>声明式服务调用</p><p>Ribbon + RestTemplate 以拼接字符串的形式构造 URL</p><ul><li>低效</li><li>难以维护</li></ul><p><a href="https://github.com/singoasher/spring-cloud-feign-demo" target="_blank" rel="noopener">Demo Address</a></p><a id="more"></a><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>注解 <code>@EnableFeignClients</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>@FeignClient(&quot;stores&quot;)</code> 创建 Ribbon 负载均衡器，<code>stores</code> 为用于创建 Ribbon 负载均衡器的客户端名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"stores"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StoreClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/stores"</span>)</span><br><span class="line">    <span class="function">List&lt;Store&gt; <span class="title">getStores</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, value = <span class="string">"/stores/&#123;storeId&#125;"</span>, consumes = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="function">Store <span class="title">update</span><span class="params">(@PathVariable(<span class="string">"storeId"</span>)</span> Long storeId, Store store)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>通过 <code>@FeignClient(name = &quot;stores&quot;, url = &quot;http://example.com/&quot;)</code> 创建，则只会向指定好的 url 发送请求</li><li>注解 <code>@PathVariable(&quot;storeId&quot;)</code> 中的参数 <code>storeId</code> 与在 Controller 中使用不尽相同，参数 <strong>不可以</strong> 省略</li></ul><p>在 Controller 中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StoreClient storeClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;List&gt; <span class="title">getStores</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(storeClient.getStores());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/&#123;value&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">update</span><span class="params">(@PathVariable String value, @RequestBody Store store)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(storeClient.update(value, store));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="About-FeignClient"><a href="#About-FeignClient" class="headerlink" title="About @FeignClient"></a>About @FeignClient</h3><ul><li>The serviceId attribute is now deprecated in favor of the name attribute.</li><li>Previously, using the url attribute, did not require the name attribute. Using name is now required.</li><li>Placeholders are supported in the name and url attributes.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"$&#123;feign.name&#125;"</span>, url = <span class="string">"$&#123;feign.url&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StoreClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>默认配置 <code>org.springframework.cloud.netflix.feign.FeignClientsConfiguration</code></p><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contract <span class="title">feignContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> feign.Contract.Default();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BasicAuthRequestInterceptor <span class="title">basicAuthRequestInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">"user"</span>, <span class="string">"password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NOTE</strong></p><ul><li>FooConfiguration does not need to be annotated with @Configuration. </li><li>However, if it is, then take care to exclude it from any @ComponentScan <ul><li>that would otherwise include this configuration as it will become the default source </li><li>for feign.Decoder, feign.Encoder, feign.Contract, etc., when specified. </li></ul></li><li>This can be avoided by putting it in a separate, non-overlapping package from any @ComponentScan or @SpringBootApplication, <ul><li>or it can be explicitly excluded in @ComponentScan.</li></ul></li></ul><h3 id="配置使能-FeignClient"><a href="#配置使能-FeignClient" class="headerlink" title="配置使能 @FeignClient"></a>配置使能 @FeignClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"stores"</span>, configuration = FooConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StoreClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置介绍"><a href="#配置介绍" class="headerlink" title="配置介绍"></a>配置介绍</h3><p>Spring Cloud Netflix provides the following beans by default for feign (BeanType beanName: ClassName):</p><ul><li>Decoder feignDecoder: ResponseEntityDecoder (which wraps a SpringDecoder)</li><li>Encoder feignEncoder: SpringEncoder</li><li>Logger feignLogger: Slf4jLogger</li><li>Contract feignContract: SpringMvcContract</li><li>Feign.Builder feignBuilder: HystrixFeign.Builder</li><li>Client feignClient: if Ribbon is enabled it is a LoadBalancerFeignClient, otherwise the default feign client is used.</li></ul><p>The OkHttpClient and ApacheHttpClient feign clients can be used by setting feign.okhttp.enabled or feign.httpclient.enabled to true, respectively, and having them on the classpath.</p><p>Spring Cloud Netflix does not provide the following beans by default for feign, but still looks up beans of these types from the application context to create the feign client:</p><ul><li>Logger.Level</li><li>Retryer</li><li>ErrorDecoder</li><li>Request.Options</li><li>Collection<requestinterceptor></requestinterceptor></li><li>SetterFactory</li></ul><h3 id="重试"><a href="#重试" class="headerlink" title="重试"></a>重试</h3><p>默认 NEVER_RETRY</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@ConditionalOnMissingBean</span><br><span class="line">public Retryer feignRetryer() &#123;</span><br><span class="line">    return Retryer.NEVER_RETRY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Retryer feignRetryer() &#123;</span><br><span class="line">    return new Retryer.Default(100, SECONDS.toMillis(1), 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="契约"><a href="#契约" class="headerlink" title="契约"></a>契约</h3><p>默认 SpringMvcContract</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@ConditionalOnMissingBean</span><br><span class="line">public Contract feignContract(ConversionService feignConversionService) &#123;</span><br><span class="line">    return new SpringMvcContract(this.parameterProcessors, feignConversionService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义，改为 Feign Contract.Default</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Contract feignContract() &#123;</span><br><span class="line">    return new Contract.Default();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时启用该配置的客户端，需要将 Spring MVC 注解，修改为 Feign 的默认注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"stores"</span>, configuration = FooConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StoreClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"GET /stores"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getStores</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Use-ThreadLocal-bound-variables-in-RequestInterceptor"><a href="#Use-ThreadLocal-bound-variables-in-RequestInterceptor" class="headerlink" title="Use ThreadLocal bound variables in RequestInterceptor"></a>Use ThreadLocal bound variables in RequestInterceptor</h2><p>You will need to either set the thread isolation strategy for Hystrix to `SEMAPHORE or disable Hystrix in Feign.</p><p>application.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># To disable Hystrix in Feign</span><br><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: false</span><br><span class="line"></span><br><span class="line"># To set thread isolation to SEMAPHORE</span><br><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    default:</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          strategy: SEMAPHORE</span><br></pre></td></tr></table></figure><h2 id="Feign-Hystrix-Support"><a href="#Feign-Hystrix-Support" class="headerlink" title="Feign Hystrix Support"></a>Feign Hystrix Support</h2><h3 id="使能"><a href="#使能" class="headerlink" title="使能"></a>使能</h3><p>If Hystrix is on the classpath and feign.hystrix.enabled=true, Feign will wrap all methods with a circuit breaker. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>默认为 false</p><p><strong>WARNING</strong></p><ul><li>Prior to the Spring Cloud Dalston release, if Hystrix was on the classpath Feign would have wrapped all methods in a circuit breaker by default. </li><li>This default behavior was changed in Spring Cloud Dalston in favor for an opt-in approach.</li></ul><p>To disable Hystrix support on a per-client basis create a vanilla Feign.Builder with the “prototype” scope, e.g.:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class FooConfiguration &#123;</span><br><span class="line">    @Bean</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">public Feign.Builder feignBuilder() &#123;</span><br><span class="line">return Feign.builder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Feign-Hystrix-Fallbacks"><a href="#Feign-Hystrix-Fallbacks" class="headerlink" title="Feign Hystrix Fallbacks"></a>Feign Hystrix Fallbacks</h3><p>增加 Fallback 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonExistenceServiceFallback</span> <span class="keyword">implements</span> <span class="title">NonExistenceService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Fallback Hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为 @FeignClient 配置 fallback 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"non-existence"</span>, fallback = NonExistenceServiceFallback.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NonExistenceService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Feign and @Primary</strong></p><ul><li>When using Feign with Hystrix fallbacks, there are multiple beans in the ApplicationContext of the same type. </li><li>This will cause @Autowired to not work because there isn’t exactly one bean, or one marked as primary. </li><li>To work around this, Spring Cloud Netflix marks <strong>all Feign instances</strong> as @Primary, so Spring Framework will know which bean to inject. </li></ul><p><strong>说明</strong></p><ul><li>Spring Cloud Netflix marks all Feign instances as @Primary.<ul><li>Spring Cloud Netflix 这样做了，但是在 IDEA 中，使用 @Autowire 时，IDE 依旧会给出下面的告警<ul><li>Could not autowire. There is more than one bean of ‘NonExistenceService’ type.</li><li><strong>这并不会影响真正的使用</strong></li></ul></li><li><strong>没什么用的提醒</strong><ul><li>给 NonExistenceService 接口加上 @Primary 可以避免这种 IDE 告警 <strong>BUT</strong> 这是个 <strong>接口</strong>，加上这个注解并 <strong>不会</strong> 有实际作用</li><li>如果像下文 <code>@FeignClient(name = &quot;hello&quot;, primary = false)</code> 关闭了自动 @Primary 注解，启动应用将会 <strong>出错！！！</strong></li></ul></li></ul></li></ul><p>In some cases, this may not be desirable. To turn off this behavior set the primary attribute of @FeignClient to false.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello"</span>, primary = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloClient</span> </span>&#123;</span><br><span class="line"><span class="comment">// methods here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If one needs access to the cause that made the fallback trigger, one can use the fallbackFactory attribute inside @FeignClient.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonExistenceServiceFallback</span> <span class="keyword">implements</span> <span class="title">NonExistenceService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Fallback Hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonExistenceServiceFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">NonExistenceService</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NonExistenceService <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NonExistenceServiceFallback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"non-existence"</span>, fallbackFactory = NonExistenceServiceFallbackFactory.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NonExistenceService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>没什么用的提醒</strong> 使用工厂顺便可以解决上文中提到的 IDE 告警问题（一个并不需要解决的问题哈）</p><p><strong>WARNING</strong></p><ul><li>There is a limitation with the implementation of fallbacks in Feign and how Hystrix fallbacks work. </li><li>Fallbacks are currently not supported for methods that return com.netflix.hystrix.HystrixCommand and rx.Observable.</li></ul><h2 id="Feign-Inheritance-Support"><a href="#Feign-Inheritance-Support" class="headerlink" title="Feign Inheritance Support"></a>Feign Inheritance Support</h2><p>Feign supports boilerplate apis via single-inheritance interfaces. This allows grouping common operations into convenient base interfaces.</p><p>公共接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value =<span class="string">"/users/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 @FeignClient 创建负载均衡器，以供客户端实现使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> <span class="keyword">extends</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NOTE</strong></p><ul><li><strong>不推荐</strong> It is generally <strong>NOT</strong> advisable to share an interface between a server and a client. </li><li><strong>紧耦合/机制差异</strong> It introduces tight coupling, and also actually does not work with Spring MVC in its current form (method parameter mapping is not inherited).</li></ul><h2 id="Feign-request-response-compression"><a href="#Feign-request-response-compression" class="headerlink" title="Feign request/response compression"></a>Feign request/response compression</h2><p>You may consider enabling the request or response GZIP compression for your Feign requests. You can do this by enabling one of the properties:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">feign.compression.request.enabled=true</span><br><span class="line">feign.compression.response.enabled=true</span><br></pre></td></tr></table></figure><p>Feign request compression gives you settings similar to what you may set for your web server:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign.compression.request.enabled=true</span><br><span class="line">feign.compression.request.mime-types=text/xml,application/xml,application/json</span><br><span class="line">feign.compression.request.min-request-size=2048</span><br></pre></td></tr></table></figure><p>These properties allow you to be selective about the compressed media types and minimum request threshold length.</p><h2 id="Feign-logging"><a href="#Feign-logging" class="headerlink" title="Feign logging"></a>Feign logging</h2><p>A logger is created for each Feign client created.<br>By default the name of the logger is the full class name of the interface used to create the Feign client.<br>Feign logging only responds to the DEBUG level.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">top.sinfonia.UserClient:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p>The Logger.Level object that you may configure per client, tells Feign how much to log. Choices are:</p><ul><li>NONE, No logging (DEFAULT).</li><li>BASIC, Log only the request method and URL and the response status code and execution time.</li><li>HEADERS, Log the basic information along with request and response headers.</li><li>FULL, Log the headers, body, and metadata for both requests and responses.</li></ul><p>For example, the following would set the Logger.Level to FULL:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class FooConfiguration &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    Logger.Level feignLoggerLevel() &#123;</span><br><span class="line">        return Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Creating-Feign-Clients-Manually"><a href="#Creating-Feign-Clients-Manually" class="headerlink" title="Creating Feign Clients Manually"></a>Creating Feign Clients Manually</h2><p>In some cases it might be necessary to customize your Feign Clients in a way that is not possible using the methods above. In this case you can create Clients using the Feign Builder API. Below is an example which creates two Feign Clients with the same interface but configures each one with a separate request interceptor.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(FeignClientsConfiguration.class)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> FooClient fooClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> FooClient adminClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FooController</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">Decoder decoder, Encoder encoder, Client client)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.fooClient = Feign.builder().client(client)</span><br><span class="line">.encoder(encoder)</span><br><span class="line">.decoder(decoder)</span><br><span class="line">.requestInterceptor(<span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">"user"</span>, <span class="string">"user"</span>))</span><br><span class="line">.target(FooClient.class, <span class="string">"http://PROD-SVC"</span>);</span><br><span class="line"><span class="keyword">this</span>.adminClient = Feign.builder().client(client)</span><br><span class="line">.encoder(encoder)</span><br><span class="line">.decoder(decoder)</span><br><span class="line">.requestInterceptor(<span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">"admin"</span>, <span class="string">"admin"</span>))</span><br><span class="line">.target(FooClient.class, <span class="string">"http://PROD-SVC"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>In the above example FeignClientsConfiguration.class is the default configuration provided by Spring Cloud Netflix.</li><li>PROD-SVC is the name of the service the Clients will be making requests to.</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR3/" target="_blank" rel="noopener">Spring Cloud</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; It makes writing web service clients easier. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;声明式服务调用&lt;/p&gt;
&lt;p&gt;Ribbon + RestTemplate 以拼接字符串的形式构造 URL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低效&lt;/li&gt;
&lt;li&gt;难以维护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/singoasher/spring-cloud-feign-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Demo Address&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://ashman.top/categories/Spring-Cloud/"/>
    
    
      <category term="Java" scheme="http://ashman.top/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://ashman.top/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://ashman.top/tags/Spring-Cloud/"/>
    
      <category term="Feign" scheme="http://ashman.top/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Ribbon 简介</title>
    <link href="http://ashman.top/2017/11/08/spring/spring-cloud/ribbon/spring-cloud-ribbon-intro/"/>
    <id>http://ashman.top/2017/11/08/spring/spring-cloud/ribbon/spring-cloud-ribbon-intro/</id>
    <published>2017-11-08T11:20:37.000Z</published>
    <updated>2017-11-21T15:32:33.836Z</updated>
    
    <content type="html"><![CDATA[<ul><li>基于 HTTP 和 TCP 的 <strong>客户端</strong> 负载均衡工具</li><li>基于 Netflix Ribbon 实现，通过 Spring Cloud 封装</li></ul><p><a href="https://github.com/singoasher/spring-cloud-ribbon-demo" target="_blank" rel="noopener">Demo Address</a></p><a id="more"></a><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>Eureka + Ribbon:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><code>spring-cloud-starter-eureka</code> 已包含必要依赖，其中包括 Ribbon 相关</p><p>Ribbon:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="虚拟主机名"><a href="#虚拟主机名" class="headerlink" title="虚拟主机名"></a>虚拟主机名</h3><p>使用 <code>@LoadBalanced</code> 的 <code>RestTemplate</code> 对象时，虚拟主机名可以 <strong>自动映射</strong> 为对应的服务地址。</p><p>如下面会用到的 <code>http://stores/stores</code> 中，<code>stores</code> 即为虚拟主机名。</p><p>通过 Eureka + Ribbon 访问服务时，默认情况下，虚拟主机名与服务名一致，如果需要设定，在服务端修改如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    virtual-host-name: foobar</span><br></pre></td></tr></table></figure><p>仅通过 Ribbon 访问服务，虚拟主机名则为配置文件中设定的客户端名称，如下例中的 <code>foo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo:</span><br><span class="line">  ribbon:</span><br><span class="line">    listOfServers: http://example.com:10088,http://example.com:20088</span><br></pre></td></tr></table></figure><p>详见下文 <a href="#脱离注册中心使用">脱离注册中心使用</a></p><h3 id="创建负载均衡的-RestTemplate-对象"><a href="#创建负载均衡的-RestTemplate-对象" class="headerlink" title="创建负载均衡的 RestTemplate 对象"></a>创建负载均衡的 RestTemplate 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOtherStuff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://stores/stores"</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建不同需求的-RestTemplate-对象"><a href="#创建不同需求的-RestTemplate-对象" class="headerlink" title="创建不同需求的 RestTemplate 对象"></a>创建不同需求的 RestTemplate 对象</h3><p>If you want a RestTemplate that is not load balanced, create a RestTemplate bean and inject it as normal.<br>To access the load balanced RestTemplate use the @LoadBalanced qualifier when you create your @Bean.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">loadBalanced</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate loadBalanced;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOtherStuff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loadBalanced.getForObject(<span class="string">"http://stores/stores"</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doStuff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://example.com"</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接使用-Ribbon-API"><a href="#直接使用-Ribbon-API" class="headerlink" title="直接使用 Ribbon API"></a>直接使用 Ribbon API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStuff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceInstance instance = loadBalancer.choose(<span class="string">"stores"</span>);</span><br><span class="line">        URI storesUri = URI.create(String.format(<span class="string">"http://%s:%s"</span>, instance.getHost(), instance.getPort()));</span><br><span class="line">        <span class="comment">// ... do something with the URI</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="脱离注册中心使用"><a href="#脱离注册中心使用" class="headerlink" title="脱离注册中心使用"></a>脱离注册中心使用</h2><p>注册中心并非 Ribbon 使用的必要条件，在无注册中心的情况下，可通过下面配置，设置 Ribbon 的服务访问列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo:</span><br><span class="line">  ribbon:</span><br><span class="line">    listOfServers: http://example.com:10088,http://example.com:20088</span><br></pre></td></tr></table></figure><p>适用场景：</p><ul><li>无注册中心</li><li>未在注册中心注册</li><li>Ribbon 禁用了注册中心</li></ul><h3 id="配置-Ribbon-禁用-Eureka"><a href="#配置-Ribbon-禁用-Eureka" class="headerlink" title="配置 Ribbon 禁用 Eureka"></a>配置 Ribbon 禁用 Eureka</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  eureka:</span><br><span class="line">    enabled: false</span><br></pre></td></tr></table></figure><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPing <span class="title">ribbonPing</span><span class="params">(IClientConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PingUrl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>WARNING</strong> </p><ul><li>The FooConfiguration has to be <strong>@Configuration</strong> </li><li>but take care that it is <strong>NOT</strong> in a <strong>@ComponentScan</strong> for the main application context, </li><li><strong>otherwise</strong> it will be shared by all the @RibbonClients. </li></ul><blockquote><p>If you use @ComponentScan (or @SpringBootApplication) you need to take steps to avoid it being included<br>(for instance put it in a separate, non-overlapping package, or specify the packages to scan explicitly in the @ComponentScan).</p></blockquote><h3 id="配置使能-RibbonClient"><a href="#配置使能-RibbonClient" class="headerlink" title="配置使能 @RibbonClient"></a>配置使能 @RibbonClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"foo"</span>, configuration = FooConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置使能-RibbonClients"><a href="#配置使能-RibbonClients" class="headerlink" title="配置使能 @RibbonClients"></a>配置使能 @RibbonClients</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RibbonClients</span>(value = &#123;</span><br><span class="line">        <span class="meta">@RibbonClient</span>(name = <span class="string">"foo"</span>, configuration = FooConfiguration.class),</span><br><span class="line">        <span class="meta">@RibbonClient</span>(name = <span class="string">"bar"</span>, configuration = BarConfiguration.class)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置介绍"><a href="#配置介绍" class="headerlink" title="配置介绍"></a>配置介绍</h3><p>默认配置 <code>org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration</code></p><ul><li>Rule <ul><li>逻辑组件，用于决定本次选择服务列表中的哪一个</li></ul></li><li>Ping <ul><li>后台运行，确认各个服务的存活状态</li></ul></li><li>ServerList <ul><li>可以被静态或动态指定，动态指定（via <code>DynamicServerListLoadBalancer</code>）时，后台线程会以特定时间间隔，刷新并过滤服务列表</li></ul></li></ul><p>Spring Cloud Netflix provides the following beans by default for ribbon (BeanType beanName: ClassName):</p><ul><li>IClientConfig ribbonClientConfig: DefaultClientConfigImpl</li><li>IRule ribbonRule: ZoneAvoidanceRule</li><li>IPing ribbonPing: NoOpPing</li><li>ServerList<server> ribbonServerList: ConfigurationBasedServerList</server></li><li>ServerListFilter<server> ribbonServerListFilter: ZonePreferenceServerListFilter</server></li><li>ILoadBalancer ribbonLoadBalancer: ZoneAwareLoadBalancer</li><li>ServerListUpdater ribbonServerListUpdater: PollingServerListUpdater</li></ul><h3 id="通过属性自定义-Ribbon-客户端"><a href="#通过属性自定义-Ribbon-客户端" class="headerlink" title="通过属性自定义 Ribbon 客户端"></a>通过属性自定义 Ribbon 客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo:</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule</span><br></pre></td></tr></table></figure><p>The supported properties are listed below and should be prefixed by <clientname>.ribbon.:</clientname></p><ul><li>NFLoadBalancerClassName: should implement ILoadBalancer</li><li>NFLoadBalancerRuleClassName: should implement IRule</li><li>NFLoadBalancerPingClassName: should implement IPing</li><li>NIWSServerListClassName: should implement ServerList</li><li>NIWSServerListFilterClassName should implement ServerListFilter</li></ul><blockquote><p>Classes defined in these properties have precedence over<br>beans defined using @RibbonClient(configuration=MyRibbonConfig.class) and the defaults provided by Spring Cloud Netflix.</p></blockquote><p><strong>说明</strong> 以上优先级说明是官方文档的备注，但是实测效果，优先级如下</p><ul><li>beans defined using @RibbonClient(configuration=MyRibbonConfig.class)</li><li>classes defined in these properties</li><li>the defaults provided by Spring Cloud Netflix</li></ul><p><strong>注意</strong> 虚拟主机名、@RibbonClient 配置的名称、通过属性配置的名称，同一种服务名称应保持 <strong>大小写一致</strong></p><h2 id="立即加载"><a href="#立即加载" class="headerlink" title="立即加载"></a>立即加载</h2><p>Each Ribbon named client has a corresponding child Application Context that Spring Cloud maintains,<br>this application context is lazily loaded up on the first request to the named client. </p><p>This lazy loading behavior can be changed to instead eagerly load up these child Application contexts<br>at startup by specifying the names of the Ribbon clients.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  eager-load:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    clients:</span> <span class="string">client1,</span> <span class="string">client2,</span> <span class="string">client3</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR3/" target="_blank" rel="noopener">Spring Cloud</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;基于 HTTP 和 TCP 的 &lt;strong&gt;客户端&lt;/strong&gt; 负载均衡工具&lt;/li&gt;
&lt;li&gt;基于 Netflix Ribbon 实现，通过 Spring Cloud 封装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/singoasher/spring-cloud-ribbon-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Demo Address&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://ashman.top/categories/Spring-Cloud/"/>
    
    
      <category term="Java" scheme="http://ashman.top/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://ashman.top/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="http://ashman.top/tags/Spring-Cloud/"/>
    
      <category term="Ribbon" scheme="http://ashman.top/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 命令模式</title>
    <link href="http://ashman.top/2017/11/06/design-pattern/behavioral-design-pattern/command-pattern/"/>
    <id>http://ashman.top/2017/11/06/design-pattern/behavioral-design-pattern/command-pattern/</id>
    <published>2017-11-06T10:11:52.000Z</published>
    <updated>2017-11-12T09:52:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/11/06/design-pattern/behavioral-design-pattern/command-pattern/command-pattern-uml.png" alt="Command Pattern UML"></p><a id="more"></a><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="多级撤销"><a href="#多级撤销" class="headerlink" title="多级撤销"></a>多级撤销</h3><h3 id="原子事务行为"><a href="#原子事务行为" class="headerlink" title="原子事务行为"></a>原子事务行为</h3><h3 id="状态条"><a href="#状态条" class="headerlink" title="状态条"></a>状态条</h3><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><h3 id="GUI按钮与菜单条"><a href="#GUI按钮与菜单条" class="headerlink" title="GUI按钮与菜单条"></a>GUI按钮与菜单条</h3><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://en.wikipedia.org/wiki/Command_pattern" target="_blank" rel="noopener">Command pattern</a></li><li><a href="http://blog.csdn.net/zdsicecoco/article/details/51332440" target="_blank" rel="noopener">命令模式应用场景</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/11/06/design-pattern/behavioral-design-pattern/command-pattern/command-pattern-uml.png&quot; alt=&quot;Command Pattern UML&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://ashman.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://ashman.top/tags/Java/"/>
    
      <category term="设计模式" scheme="http://ashman.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 命令</title>
    <link href="http://ashman.top/2017/11/06/mongodb/mongodb-command/"/>
    <id>http://ashman.top/2017/11/06/mongodb/mongodb-command/</id>
    <published>2017-11-06T07:59:17.000Z</published>
    <updated>2017-12-21T01:44:49.814Z</updated>
    
    <content type="html"><![CDATA[<p>这里会简单介绍 MongoDB 操作命令（持续更新……）</p><a id="more"></a><h2 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo x.x.x.x:27017/target</span><br></pre></td></tr></table></figure><h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.version()</span><br></pre></td></tr></table></figure><h2 id="数据库列表"><a href="#数据库列表" class="headerlink" title="数据库列表"></a>数据库列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure><h2 id="当前位置"><a href="#当前位置" class="headerlink" title="当前位置"></a>当前位置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure><h2 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show users</span><br><span class="line">db.system.users.find()</span><br></pre></td></tr></table></figure><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;user:&quot;root&quot;,pwd:&quot;123456&quot;,roles:[&quot;root&quot;]&#125;)</span><br><span class="line">db.createUser(</span><br><span class="line">    &#123;</span><br><span class="line">        user: &quot;admin&quot;, </span><br><span class="line">        customData: &#123;</span><br><span class="line">            description: &quot;superuser&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        pwd: &quot;123456&quot;, </span><br><span class="line">        roles: [</span><br><span class="line">            &#123;</span><br><span class="line">                role: &quot;userAdminAnyDatabase&quot;, </span><br><span class="line">                db: &quot;admin&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;test&apos;).find(&#123;&#125;)</span><br><span class="line">db.getCollection(&apos;test&apos;).find(</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: &quot;xxx&quot;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;test&apos;).insert(</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: &quot;yyy&quot;, </span><br><span class="line">        &quot;isTest&quot;: false, </span><br><span class="line">        &quot;test&quot;: &#123;</span><br><span class="line">            &quot;id&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>文档中对象结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;59fc4cb94422cb484447463f&quot;),</span><br><span class="line">    &quot;id&quot; : &quot;yyy&quot;,</span><br><span class="line">    &quot;isTest&quot; : false,</span><br><span class="line">    &quot;test&quot; : &#123;</span><br><span class="line">        &quot;id&quot; : 1.0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;test&apos;).update(</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: &quot;yyy&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        $set: &#123;</span><br><span class="line">            &quot;isTest&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>更新内层属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;test&apos;).update(</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: &quot;yyy&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        $set: &#123;</span><br><span class="line">            &quot;test.id&quot;: 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;test&apos;).remove(&#123;&quot;id&quot;: &quot;yyy&quot;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里会简单介绍 MongoDB 操作命令（持续更新……）&lt;/p&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="http://ashman.top/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://ashman.top/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 安装及使用 - CentOS7</title>
    <link href="http://ashman.top/2017/11/03/mongodb/install-mongodb-centos7/"/>
    <id>http://ashman.top/2017/11/03/mongodb/install-mongodb-centos7/</id>
    <published>2017-11-03T03:17:08.000Z</published>
    <updated>2017-11-12T09:52:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里会简单介绍如何在 CentOS7 上安装及使用 MongoDB，但是，不要指望会有多全面。</p><a id="more"></a><h2 id="配置包管理系统"><a href="#配置包管理系统" class="headerlink" title="配置包管理系统"></a>配置包管理系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ su root</span><br><span class="line">$ cd /etc/yum.repos.d</span><br><span class="line">$ sudo touch mongodb-org-3.4.repo</span><br><span class="line">$ sudo vim mongodb-org-3.4.repo</span><br></pre></td></tr></table></figure><p>文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.4]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y mongodb-org</span><br></pre></td></tr></table></figure><h2 id="配置工作目录"><a href="#配置工作目录" class="headerlink" title="配置工作目录"></a>配置工作目录</h2><p>编辑配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/mongod.conf</span><br></pre></td></tr></table></figure><p>默认配置文件中有下面两项配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">storage:</span><br><span class="line">  dbPath: /var/lib/mongo</span><br><span class="line">systemLog:</span><br><span class="line">  path: /var/log/mongodb/mongod.log</span><br></pre></td></tr></table></figure><p>这两项指定了数据和日志的存储路径，使用默认是可行的，请根据自身需求决定。</p><p>这里将配置修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">storage:</span><br><span class="line">  dbPath: /home/mongo/data/db</span><br><span class="line">systemLog:</span><br><span class="line">  path: /home/mongo/log/mongod.log</span><br></pre></td></tr></table></figure><p>同时创建路径，操作如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/</span><br><span class="line">$ sudo mkdir mongodb</span><br><span class="line">$ cd mongodb/</span><br><span class="line">$ sudo mkdir -p data/db</span><br><span class="line">$ sudo mkdir log</span><br><span class="line">$ cd log</span><br><span class="line">$ touch mongod.log</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p><strong>注</strong> 下面的操作是直接在 root 权限下进行的！<del>关于如何使用非 root 权限，以后也许会追加上吧……</del></p><p><del>……有需求的时候 (o゜▽゜)o☆</del></p><p>如何使用非 root 用户启动，已经在下文添加，详见 <a href="#非-root-用户启动">非 root 用户启动</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ su root</span><br><span class="line"># systemctl start mongod.service</span><br></pre></td></tr></table></figure><p>如果出现启动错误，可以通过下面的方式启动</p><p>解决错误？不存在的，懒 (o゜▽゜)o☆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mongod --config /etc/mongod.conf</span><br></pre></td></tr></table></figure><p>关于启动方式：</p><ul><li>以自定义的 mongodb 配置文件方式启动：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mongod --config mongod.conf</span><br></pre></td></tr></table></figure><ul><li>以修复模式启动 mongodb：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --repair -f mongod.conf</span><br></pre></td></tr></table></figure><ul><li>以参数式启动：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongod \</span><br><span class="line">--dbpath=/usr/local/mongodb/data/db \</span><br><span class="line">--logpath=/usr/local/mongodb/log/mongod.log \</span><br><span class="line">--fork</span><br></pre></td></tr></table></figure><p>启动成功，可通过客户端登录，并简单操作检验</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mongo</span><br><span class="line">&gt; db,version();</span><br><span class="line">3.4.6</span><br></pre></td></tr></table></figure><h2 id="可能出现的报错"><a href="#可能出现的报错" class="headerlink" title="可能出现的报错"></a>可能出现的报错</h2><p><strong>HINT</strong> 仅仅是可能出现的错误原因，以供参考。最好的办法依旧是 <strong>查看运行日志中记录的错误原因</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: child process failed, exited with error number 1</span><br></pre></td></tr></table></figure><p>上面错误，可能是 mongod.conf 中配置的路径不一致问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: child process failed, exited with error number 100</span><br></pre></td></tr></table></figure><p>上面错误，可能是没有正常关闭导致的，那么可以删除 mongod.lock 文件，再行启动，可能会用到修复模式</p><p><strong>PS</strong> 锁和日志文件，在 mongod.conf 的指定目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: child process failed, exited with error number 100</span><br></pre></td></tr></table></figure><p>上面错误，可能是配置文件有问题，请检查配置文件</p><h3 id="正确的关闭"><a href="#正确的关闭" class="headerlink" title="正确的关闭"></a>正确的关闭</h3><ol><li>When running the mongod instance in interactive mode <code>Ctrl - C</code></li><li><code>mongod --shutdown</code></li><li><code>kill &lt;mongod process ID&gt;</code><ul><li>Never use kill -9 (i.e. SIGKILL) to terminate a mongod instance.</li></ul></li><li>Use <code>db.shutdownServer()</code> under <code>admin</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mongo</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.shutdownServer();</span><br><span class="line">&gt; exit</span><br><span class="line">bye</span><br></pre></td></tr></table></figure><h2 id="一个排错的栗子"><a href="#一个排错的栗子" class="headerlink" title="一个排错的栗子"></a>一个排错的栗子</h2><p>进行 MongoDB 的访问控制，需要在 bindIp 后，添加需要访问 MongoDB 的 IP 地址</p><p>修改配置如下（对于本文安装的 MongoDB 版本来说，是错误的哈）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net:</span><br><span class="line">  bindIp: 127.0.0.1,123.123.123.123</span><br></pre></td></tr></table></figure><p>关闭数据服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mongo</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.shutdownServer();</span><br><span class="line">&gt; exit</span><br><span class="line">bye</span><br></pre></td></tr></table></figure><p>这是正确的关闭，但是重启服务，却出现了报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mongod --config mongod.conf </span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 28080</span><br><span class="line">ERROR: child process failed, exited with error number 48</span><br></pre></td></tr></table></figure><p>于是，删锁，删日志的，修复模式等……没有效果</p><p>算了，自己看下日志吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen(): bind() failed Cannot assign requested address for socket: 123.123.123.123:27017</span><br></pre></td></tr></table></figure><p>也许这叫……偷懒的下场？</p><p>移除配置文件中的错误配置 <code>123.123.123.123</code>，正常启动，可以启动成功。</p><h3 id="正确的权限控制配置方式"><a href="#正确的权限控制配置方式" class="headerlink" title="正确的权限控制配置方式"></a>正确的权限控制配置方式</h3><p>IP访问控制：在 bindIp 后，添加需要访问 MongoDB 的客户端 IP 地址</p><p>首先，关闭 mongo 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mongod --config /etc/mongod.conf --shutdown</span><br><span class="line">killing process with pid: 28715</span><br></pre></td></tr></table></figure><p>修改配置文件 <code>/etc/mongod.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp:</span><br><span class="line">    - 127.0.0.1  # Listen to local interface only, comment to listen on all interfaces.</span><br><span class="line">    - 123.123.123.123</span><br></pre></td></tr></table></figure><p>然后，重启，便可以顺利启动了。</p><p>关于之前的错误，应当是当前版本配置文件是 yaml 形式的，之前错误配置的方式无法被识别。</p><p><strong>如果并不是这个原因，请务必告诉我</strong></p><p>测试远程连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo x.x.x.x:27017/admin</span><br></pre></td></tr></table></figure><p>success</p><h2 id="设置访问密码"><a href="#设置访问密码" class="headerlink" title="设置访问密码"></a>设置访问密码</h2><p>创建 root/admin 用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db</span><br><span class="line">admin</span><br><span class="line">&gt; show users;</span><br><span class="line">&gt; db.createUser(&#123;user:&quot;root&quot;,pwd:&quot;123456&quot;,roles:[&quot;root&quot;]&#125;)</span><br><span class="line">Successfully added user: &#123; &quot;user&quot; : &quot;root&quot;, &quot;roles&quot; : [ &quot;root&quot; ] &#125;</span><br><span class="line">&gt; db.createUser(&#123;user:&quot;admin&quot;,pwd:&quot;123456&quot;,roles:[&#123;role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;&#125;]&#125;)</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">&quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">&quot;roles&quot; : [</span><br><span class="line">&#123;</span><br><span class="line">&quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">&quot;db&quot; : &quot;admin&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&gt; show users;</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : &quot;admin.admin&quot;,</span><br><span class="line">&quot;user&quot; : &quot;admin&quot;,</span><br><span class="line">&quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">&quot;roles&quot; : [</span><br><span class="line">&#123;</span><br><span class="line">&quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">&quot;db&quot; : &quot;admin&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : &quot;admin.root&quot;,</span><br><span class="line">&quot;user&quot; : &quot;root&quot;,</span><br><span class="line">&quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">&quot;roles&quot; : [</span><br><span class="line">&#123;</span><br><span class="line">&quot;role&quot; : &quot;root&quot;,</span><br><span class="line">&quot;db&quot; : &quot;admin&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.system.users.find()</span><br><span class="line">&#123; &quot;_id&quot; : &quot;admin.root&quot;, &quot;user&quot; : &quot;root&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;credentials&quot; : &#123; &quot;SCRAM-SHA-1&quot; : &#123; &quot;iterationCount&quot; : 10000, &quot;salt&quot; : &quot;yos3QUM0HICfWQuveww6Uw==&quot;, &quot;storedKey&quot; : &quot;6ws6buooQaz5Eho068qX4HagpF8=&quot;, &quot;serverKey&quot; : &quot;trfuBWIqVmy/Yl8Taj2E220GxK8=&quot; &#125; &#125;, &quot;roles&quot; : [ &#123; &quot;role&quot; : &quot;root&quot;, &quot;db&quot; : &quot;admin&quot; &#125; ] &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;admin.admin&quot;, &quot;user&quot; : &quot;admin&quot;, &quot;db&quot; : &quot;admin&quot;, &quot;credentials&quot; : &#123; &quot;SCRAM-SHA-1&quot; : &#123; &quot;iterationCount&quot; : 10000, &quot;salt&quot; : &quot;zbIUq6Gcg5GunU5Pbd2R0A==&quot;, &quot;storedKey&quot; : &quot;enwbhOQHH/8m/n/ww7lufaG32tU=&quot;, &quot;serverKey&quot; : &quot;MOtEW78Qw6bfq1BoKVlW4daJHzY=&quot; &#125; &#125;, &quot;roles&quot; : [ &#123; &quot;role&quot; : &quot;userAdminAnyDatabase&quot;, &quot;db&quot; : &quot;admin&quot; &#125; ] &#125;</span><br><span class="line">&gt; exit</span><br><span class="line">bye</span><br></pre></td></tr></table></figure><p>停止当前服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mongod --config /etc/mongod.conf --shutdown</span><br><span class="line">[sudo] password for mongo: </span><br><span class="line">killing process with pid: 29076</span><br></pre></td></tr></table></figure><p><strong>PS</strong> 此处需要使用 <code>sudo</code> 是因为之前是通过 root 权限开启的 mongo 服务，请根据具体情况决定如何使用</p><p><strong>HINT</strong> 想要使用非 root 开启服务，除了在非 root 用户下启动，还需要将之前 root 权限才能访问的，数据、日志、以及配置文件的访问权限进行修改</p><p>修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/mongod.conf</span><br></pre></td></tr></table></figure><p>增加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure><p>之后重新启动即可，可继续使用 root 用户启动，也可参考下文 <a href="#非-root-用户启动">非 root 用户启动</a>，配置非 root 用户启动。</p><p>启动后，通过客户端登录。在各种命令执行时，将会提示没有权限，执行下面操作，<strong>通过验证</strong>，才可正常使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.auth(&quot;admin&quot;, &quot;123456&quot;)</span><br><span class="line">1</span><br><span class="line">&gt; show dbs;</span><br><span class="line">admin  0.000GB</span><br><span class="line">local  0.000GB</span><br><span class="line">test   0.000GB</span><br></pre></td></tr></table></figure><p>需要说明的是，用户 admin 具有管理权限（无法读写），用户 root 具有最高权限，具体使用可以参考以下两个链接</p><ul><li><strong><a href="https://docs.mongodb.com/manual/reference/built-in-roles/" target="_blank" rel="noopener">用户角色介绍</a></strong> </li><li><strong><a href="http://www.cnblogs.com/out-of-memory/p/6810411.html" target="_blank" rel="noopener">MongoDB用户角色配置</a></strong></li></ul><p><strong>PS</strong> </p><ul><li>root/admin 用户并非是必须的，此处仅仅是以此作为演示。</li><li>如果有一个想要删除的用户，且没有具有 root 权限的用户，在权限验证开启状态下，是无法进行删除操作的。</li><li>无 root 权限用户时的，操作流程：关闭服务 -&gt; 修改配置文件（关闭权限验证） -&gt; 重启服务 -&gt; 按照需求增删用户 -&gt; 重新开启验证 -&gt; 重启服务。</li></ul><p>平时使用，配置一个具有读写权限的用户即可。可能需要注意的一点是，创建对应库的读写用户，最好切换到指定库，再执行添加操作。</p><h2 id="非-root-用户启动"><a href="#非-root-用户启动" class="headerlink" title="非 root 用户启动"></a>非 root 用户启动</h2><p><strong>PS</strong> 改为使用 mongo 用户启动</p><p>修改目录/文件访问权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R mongo:mongo /etc/mongod.conf </span><br><span class="line">$ ll /etc/mongod.conf </span><br><span class="line">-rw-r--r-- 1 mongo mongo 834 Nov  6 11:14 /etc/mongod.conf</span><br><span class="line">$ sudo chown -R mongo:mongo /usr/local/mongodb/</span><br></pre></td></tr></table></figure><p>重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mongo@x.x.x.x ~]$ mongod --config /etc/mongod.conf </span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 26924</span><br><span class="line">ERROR: child process failed, exited with error number 1</span><br></pre></td></tr></table></figure><p>出错，查看日志文件（几乎又忘记去看日志这件事了……）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2017-11-06T11:31:00.412+0800 I CONTROL  [main] ERROR: Cannot write pid file to /var/run/mongodb/mongod.pid: Permission denied</span><br></pre></td></tr></table></figure><p>修改访问权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R mongo:mongo /var/run/mongodb/</span><br></pre></td></tr></table></figure><p>重新启动</p><p><strong>PS</strong> 在此之前，犯了经验主义错误，删除过锁文件和日志文件，而不是看日志找错误；如果启动失败，请自行查看日志，或者尝试删除锁文件和日志文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mongod --config /etc/mongod.conf </span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 27200</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/#install-mongodb-community-edition" target="_blank" rel="noopener">Install MongoDB Community Edition</a></li><li><a href="http://www.cnblogs.com/out-of-memory/p/6810411.html" target="_blank" rel="noopener">MongoDB用户角色配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里会简单介绍如何在 CentOS7 上安装及使用 MongoDB，但是，不要指望会有多全面。&lt;/p&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="http://ashman.top/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://ashman.top/tags/MongoDB/"/>
    
      <category term="CentOS" scheme="http://ashman.top/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 访问者模式</title>
    <link href="http://ashman.top/2017/10/11/design-pattern/behavioral-design-pattern/visitor-pattern/"/>
    <id>http://ashman.top/2017/10/11/design-pattern/behavioral-design-pattern/visitor-pattern/</id>
    <published>2017-10-11T12:05:57.000Z</published>
    <updated>2017-11-12T09:52:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>一种将算法与对象结构分离的软件设计模式</p><p><img src="/2017/10/11/design-pattern/behavioral-design-pattern/visitor-pattern/visitor-pattern-uml.png" alt="Visitor Pattern UML"></p><a id="more"></a><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><blockquote><p>访问者模式（Visitor Pattern）是GoF提出的23种设计模式中的一种，属于行为模式。表示一个作用于某 <strong>对象结构</strong> 中的各元素的 <strong>操作</strong>，通过访问者模式，可以在不改变各元素类的前提下定义作用于这些元素的新操作。</p></blockquote><h3 id="访问者模式样例"><a href="#访问者模式样例" class="headerlink" title="访问者模式样例"></a>访问者模式样例</h3><ul><li><strong>对象结构</strong>：被访问元素（Element）对象的集合</li><li><strong>操作</strong>：访问者（Visitor）中定义的访问Element对象的方法</li></ul><h4 id="被访问元素-Element"><a href="#被访问元素-Element" class="headerlink" title="被访问元素 Element"></a>被访问元素 Element</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element1</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Element1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element2</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Element2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问者-Visitor"><a href="#访问者-Visitor" class="headerlink" title="访问者 Visitor"></a>访问者 Visitor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Element1 element1)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Element2 element2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor1</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Element1 element1)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Visitor1 "</span> + element1.info());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Element2 element2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Visitor1 "</span> + element2.info());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor2</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Element1 element1)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Visitor2 "</span> + element1.info());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Element2 element2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Visitor2 "</span> + element2.info());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Element e1 = <span class="keyword">new</span> Element1();</span><br><span class="line">        Element e2 = <span class="keyword">new</span> Element2();</span><br><span class="line"></span><br><span class="line">        Visitor v1 = <span class="keyword">new</span> Visitor1();</span><br><span class="line">        Visitor v2 = <span class="keyword">new</span> Visitor2();</span><br><span class="line"></span><br><span class="line">        e1.accept(v1); <span class="comment">// Visitor1 Element1</span></span><br><span class="line">        e1.accept(v2); <span class="comment">// Visitor2 Element1</span></span><br><span class="line"></span><br><span class="line">        e2.accept(v1); <span class="comment">// Visitor1 Element2</span></span><br><span class="line">        e2.accept(v2); <span class="comment">// Visitor2 Element2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>访问者模式将 <strong>对象结构</strong> 和作用于结构上的 <strong>操作</strong> 解耦，方便操作相对自由地演化。拿前面的例子来讲，新增操作只需要添加Visitor的实现类即可，而不用改变对象结构（被访问元素集合）。</p><p>但需要注意的是，在Element数据结构变动时，访问者Visitor的整个继承体系都需要对应修改。因此，访问者模式适用于 <strong>数据结构相对稳定</strong> 以及 <strong>算法易变化</strong> 的系统。</p><p>也可以这样去理解，访问者模式是一种优化，它将 <strong>对象结构</strong> 中容易变化的 <strong>操作</strong> 抽象出来，通过访问者来执行这些操作。不难发现，如果不借助访问者模式，在这些容易变化的操作变动时，就不得不同时改变对象结构了。</p><p>这其实是这样的一个问题，在为一个现有的类增加新功能时，需要考虑到以下几点需求：</p><ul><li>新功能会不会与现有功能出现兼容性问题？</li><li>以后会不会再需要添加？</li><li>如果类不允许修改代码怎么办？</li></ul><p>面对这些需求，最好的解决方法就是使用访问者模式，将数据结构与算法解耦。</p><hr><h2 id="方法分派"><a href="#方法分派" class="headerlink" title="方法分派"></a>方法分派</h2><h3 id="方法分派（Method-Dispatch）"><a href="#方法分派（Method-Dispatch）" class="headerlink" title="方法分派（Method Dispatch）"></a>方法分派（Method Dispatch）</h3><p>假设有一个万能许愿机（程序），可以 <strong>实现愿望（方法）</strong>，实现很多不同的 <strong>愿望（方法参数）</strong>。显然，每次要实现的愿望不同，其实现方式也不可能一样（多个方法）。但是，却都是 <strong>实现愿望</strong> 这一类方法。</p><p>再假设有两个许愿机，一个只需要喊出你的愿望（给出参数）就够了，另一个则必须先找到正确的许愿入口（方法）才能许愿。在可以100%实现愿望的前提下，哪个许愿机使用更为方便就相当明显了。</p><p>同理，如果能用同样的名字来命名同一类方法，则会有助于程序代码 <strong>清晰</strong> 的表达出语义。</p><p>这就引出了 <strong>方法分派</strong> 的概念，因为使用相同的方法名，就需要解决选用同名方法哪个版本的问题。有两种途径来解决这一问题：</p><ol><li>编译时由编译器选择（很多文章提出，可以认为这是一种静态分派）</li><li>运行时进行 <strong>方法分派</strong></li></ol><p>在继续展开前，首先举例说明下两个概念：实际类型与静态类型，避免混淆。栗子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Child 变量p的实际类型</span><br><span class="line">// Parent 变量p的静态类型</span><br><span class="line">Parent p = new Child();</span><br></pre></td></tr></table></figure><h4 id="编译时-重载（Overload）"><a href="#编译时-重载（Overload）" class="headerlink" title="编译时 - 重载（Overload）"></a>编译时 - 重载（Overload）</h4><blockquote><p>参数的数量、类型等信息组成了函数的signature，使用同一个名字来命名signature不同的函数，称为函数重载（function overloading）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(i + j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Parent p)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Child c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Child"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Foo foo = <span class="keyword">new</span> Foo();</span><br><span class="line">        Parent child = <span class="keyword">new</span> Child();</span><br><span class="line">        Child c = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line">        foo.foo(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line">        foo.foo(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line">        foo.foo(<span class="string">"Hello"</span>); <span class="comment">// Hello</span></span><br><span class="line">        foo.foo(child); <span class="comment">// Parent</span></span><br><span class="line">        foo.foo(c); <span class="comment">// Child</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数重载是编译时概念，通过函数的signature，编译器已经有足够信息来判断应该使用哪个版本的方法。像上面的栗子，输入参数不同，对象foo的foo()方法打印结果也对应改变。</p><p>需要注意的是，参数类型是由变量声明的类型所决定的，也就是说编译器只会根据 <strong>变量的静态类型</strong> 来判断选择哪个版本的方法。也就是栗子中，下面这两行代码运行结果所体现出来的特性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo.foo(child); // Parent</span><br><span class="line">foo.foo(c); // Child</span><br></pre></td></tr></table></figure><p>这与Java是一种单分派语言相关，关于单分派这个概念，本文后面将会介绍。</p><h4 id="运行时-覆盖（Override）"><a href="#运行时-覆盖（Override）" class="headerlink" title="运行时 - 覆盖（Override）"></a>运行时 - 覆盖（Override）</h4><p>同一个继承链上的不同类型可以拥有signature相同的虚方法，表现出多态。从语义上说，在编译时无法判断一个虚方法调用到底应该采用继承链上signature相同的哪个版本，所以要留待运行时进行分派（dispatch）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Foo foo = <span class="keyword">new</span> Bar();</span><br><span class="line">        foo.foo(<span class="number">0</span>); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栗子中，Foo与Bar便是同一个继承链上的不同类型，拥有signature相同的方法foo()，在方法调用时发生了分派，实际运行时使用了Bar的方法。</p><p>这里有一个和重载栗子中很类似的现象，重载栗子中，方法的调用只与 <strong>方法参数</strong> 的声明类型（静态类型）相关，而这个栗子中的foo对象（下面称其为 <strong>方法接收者</strong>），其方法的调用与变量foo的实际类型相关（栗子中其实际类型为Bar）。</p><p>使用静态类型还是实际类型，<strong>方法参数</strong> 和 <strong>方法接收者</strong> 有着不同的选择，如前文所讲，这与Java是一种单分派语言相关，下面将开始具体介绍。</p><h3 id="方法的宗量"><a href="#方法的宗量" class="headerlink" title="方法的宗量"></a>方法的宗量</h3><p><strong>方法接收者</strong> 和 <strong>方法参数</strong> 统称为方法的宗量。 </p><p>根据分派基于宗量多少（接收者是一个宗量，参数是一个宗量），可以将分派分为 <strong>单分派</strong> 和 <strong>多分派</strong>。</p><ul><li>单分派：根据一个宗量就可以知道调用目标（即应该调用哪个方法）。</li><li>多分派：需要根据多个宗量才能确定调用目标。</li></ul><h3 id="方法接收者"><a href="#方法接收者" class="headerlink" title="方法接收者"></a>方法接收者</h3><blockquote><p>面向对象语言中经常会对函数调用的 <strong>第一个参数</strong> 做特殊处理，包括语法和语义都很特别。</p></blockquote><ul><li>语法：第一个参数不用写在参数列表，而是写在某种特殊符号之前（p.baz()的“.”），作为隐含参数。</li><li>语义：第一个参数被称为方法的接收者（receiver）。</li></ul><p>也就是说方法接收者是一个特殊的方法参数，当然，为避免混淆，后面不会再称其为参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parent p = new Child();</span><br><span class="line">p.baz(); // p为方法baz调用的接收者</span><br></pre></td></tr></table></figure><p>结合前面的栗子，可以做出这样的总结：</p><ul><li>接收者（宗量1）的 <strong>实际类型</strong> 会参与到方法分派的判断中</li><li>方法参数（宗量2）<ul><li>其 <strong>静态类型</strong> 会影响方法选择，则为 <strong>单一分派</strong> + <strong>方法重载</strong>。</li><li>以 <strong>实际类型</strong> 参与到方法分派的判断，则为 <strong>多分派</strong>。 </li></ul></li></ul><h3 id="单分派与多分派的判断"><a href="#单分派与多分派的判断" class="headerlink" title="单分派与多分派的判断"></a>单分派与多分派的判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foobar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baz</span><span class="params">(Parent p1, Parent p2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ParentParent"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baz</span><span class="params">(Parent p, Child c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ParentChild"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baz</span><span class="params">(Child c1, Child c2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ChildChild"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Foobar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baz</span><span class="params">(Parent p1, Parent p2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"PP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baz</span><span class="params">(Parent p, Child c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"PC"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baz</span><span class="params">(Child c1, Child c2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CC"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法的接收者可以有如下三种情况的声明</p><ul><li>通过 <code>foobar</code> 调用 <code>baz</code> 方法打印的结果是 <code>ParentParent</code> 这一类的输出</li><li>通过 <code>foo</code> 和 <code>bar</code> 调用 <code>baz</code> 方法打印的结果均为 <code>PP</code> 这一类的输出</li><li>调用方法后的输出，与方法接收者的实际类型有关</li><li><strong>结论</strong> 方法接收者的 <strong>实际类型</strong> 参与到了方法分派之中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Foobar foobar = new Foobar(); // 实际类型：Foobar</span><br><span class="line">Foo foo = new Foo(); // 实际类型 Foo</span><br><span class="line">Foobar bar = new Foo(); // 实际类型 Foo</span><br></pre></td></tr></table></figure><p>类似的，方法参数也可以有如下三种情况的声明</p><ul><li><strong>结论</strong> Java参数的实际类型并不会参与到方法分派，仅有参数的静态类型对调用结果产生了影响<ul><li>Java是一种单分派语言</li><li>多分派语言，则可以根据参数的实际类型进行方法的调用</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Parent p = new Parent(); // 实际类型：Parent</span><br><span class="line">Parent pc = new Child(); // 实际类型：Child</span><br><span class="line">Child c = new Child(); // 实际类型：Child</span><br><span class="line"></span><br><span class="line">foobar.baz(p, p); // ParentParent</span><br><span class="line">foobar.baz(p, pc); // ParentParent &gt;&gt;&gt; pc 的实际类型并没有影响到方法的执行结果</span><br><span class="line">foobar.baz(p, c); // ParentChild</span><br></pre></td></tr></table></figure><h3 id="模拟双分派"><a href="#模拟双分派" class="headerlink" title="模拟双分派"></a>模拟双分派</h3><blockquote><p>访问者模式使得我们可以在传统的单分派（single-dispatch）语言（如Smalltalk、Java和C++）中模拟双分派技术。对于支持多分派（multiple-dispathc）的语言（如CLOS），访问者模式已经内置于语言特性之中了，从而不再重要。</p></blockquote><h4 id="访问目标"><a href="#访问目标" class="headerlink" title="访问目标"></a>访问目标</h4><blockquote><p>一个由许多对象构成的对象结构，这些对象的类都拥有一个accept方法用来接受访问者对象；</p></blockquote><ul><li>上面栗子中的 <code>Parent &amp;&amp; Child</code> 便可改造为一组访问目标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Parent &#123;</span><br><span class="line">    public String accept(FoobarVisitor visitor) &#123;</span><br><span class="line">        return visitor.visit(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Child extends Parent &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String accept(FoobarVisitor visitor) &#123;</span><br><span class="line">        // 注意此方法必须重写，否则this将无法指代Child的一个实例</span><br><span class="line">        return visitor.visit(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问者"><a href="#访问者" class="headerlink" title="访问者"></a>访问者</h4><blockquote><p>访问者是一个接口，它拥有一个visit方法，这个方法对访问到的对象结构中不同类型的元素作出不同的反应；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class FoobarVisitor &#123;</span><br><span class="line"></span><br><span class="line">    public String visit(Parent parent) &#123;</span><br><span class="line">        return &quot;Parent&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String visit(Child child) &#123;</span><br><span class="line">        return &quot;Child&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class FooVisitor extends FoobarVisitor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String visit(Parent parent) &#123;</span><br><span class="line">        return &quot;P&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String visit(Child child) &#123;</span><br><span class="line">        return &quot;C&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过访问者调用目标对象"><a href="#通过访问者调用目标对象" class="headerlink" title="通过访问者调用目标对象"></a>通过访问者调用目标对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">class Foobar &#123;</span><br><span class="line">    private FoobarVisitor foobarVisitor = new FoobarVisitor();</span><br><span class="line"></span><br><span class="line">    public void baz(Parent p1, Parent p2) &#123;</span><br><span class="line">        System.out.println(p1.accept(foobarVisitor) + p2.accept(foobarVisitor));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void baz(Parent p, Child c) &#123;</span><br><span class="line">        System.out.println(p.accept(foobarVisitor) + c.accept(foobarVisitor));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void baz(Child c1, Child c2) &#123;</span><br><span class="line">        System.out.println(c1.accept(foobarVisitor) + c2.accept(foobarVisitor));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Foo extends Foobar &#123;</span><br><span class="line">    private FoobarVisitor foobarVisitor = new FooVisitor();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void baz(Parent p1, Parent p2) &#123;</span><br><span class="line">        System.out.println(p1.accept(foobarVisitor) + p2.accept(foobarVisitor));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void baz(Parent p, Child c) &#123;</span><br><span class="line">        System.out.println(p.accept(foobarVisitor) + c.accept(foobarVisitor));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void baz(Child c1, Child c2) &#123;</span><br><span class="line">        System.out.println(c1.accept(foobarVisitor) + c2.accept(foobarVisitor));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Foobar foobar = new Foobar(); // 实际类型：Foobar</span><br><span class="line">        Foo foo = new Foo(); // 实际类型 Foo</span><br><span class="line">        Foobar bar = new Foo(); // 实际类型 Foo</span><br><span class="line"></span><br><span class="line">        Parent p = new Parent(); // 实际类型：Parent</span><br><span class="line">        Parent pc = new Child(); // 实际类型：Child</span><br><span class="line">        Child c = new Child(); // 实际类型：Child</span><br><span class="line"></span><br><span class="line">        foobar.baz(p, p); // ParentParent</span><br><span class="line">        foobar.baz(p, pc); // ParentChild</span><br><span class="line">        foobar.baz(p, c); // ParentChild</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先，根据前文 <code>foobar.baz(p, pc);</code> 可定还是调用的方法 <code>void baz(Parent p1, Parent p2)</code> </li><li>但是，因为在方法内部使用了 <code>p2.accept(foobarVisitor)</code>，p2被分配到实际类型</li><li>然后在 <code>accept</code> 方法中 <code>foobarVisitor.visit(this)</code>，foobarVisitor也被分配到了实际类型</li><li>因此最后输出为 <code>ParentChild</code>，与之前不同，实现了模拟的双分派，基于方法接收者与方法参数</li></ul><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="http://rednaxelafx.iteye.com/blog/260206" target="_blank" rel="noopener">方法分派（method dispatch）的几个例子</a></li><li><a href="http://blog.csdn.net/fan2012huan/article/details/51004615" target="_blank" rel="noopener">java方法调用之单分派与多分派（二）</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">访问者模式</a></li><li><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html" target="_blank" rel="noopener">Java开发中的23种设计模式详解(转)</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一种将算法与对象结构分离的软件设计模式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/10/11/design-pattern/behavioral-design-pattern/visitor-pattern/visitor-pattern-uml.png&quot; alt=&quot;Visitor Pattern UML&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://ashman.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://ashman.top/tags/Java/"/>
    
      <category term="设计模式" scheme="http://ashman.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
